//思路：
1.取有序数组中间数值作为二叉搜索树的根，这样高度最小。
2.确定根之后，递归依次确定根的左子树的根，右子树的根。
class MinimalBST {
public:
    TreeNode* buildBST(vector<int> vals,int left,int right){
        if(left>right){
            return NULL;
        }
        int mid=left+(right-left)/2;
        TreeNode* root=new TreeNode(vals[mid]);
        root->left=buildBST(vals,left, mid-1);
        root->right=buildBST(vals, mid+1,right);
        return root;
    }
    
    int BST_height(TreeNode* root){
        if(root==NULL){
            return 0;
        }
        int left_height=BST_height(root->left);
        int right_height=BST_height(root->right);
        return left_height>right_height?left_height+1:right_height+1;
    }
    
    int buildMinimalBST(vector<int> vals) {
        // write code here
        TreeNode* root=buildBST(vals,0,vals.size()-1);
        return BST_height(root);
    }
};
